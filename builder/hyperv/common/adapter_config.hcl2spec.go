// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package common

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatAdapterConfig is an auto-generated flat version of AdapterConfig.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatAdapterConfig struct {
	Name       *string `mapstructure:"adapter_name" required:"false" cty:"adapter_name" hcl:"adapter_name"`
	SwitchName *string `mapstructure:"switch_name" required:"false" cty:"switch_name" hcl:"switch_name"`
	VlanId     *string `mapstructure:"vlan_id" required:"false" cty:"vlan_id" hcl:"vlan_id"`
	MacAddress *string `mapstructure:"mac_address" required:"false" cty:"mac_address" hcl:"mac_address"`
}

// FlatMapstructure returns a new FlatAdapterConfig.
// FlatAdapterConfig is an auto-generated flat version of AdapterConfig.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*AdapterConfig) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatAdapterConfig)
}

// HCL2Spec returns the hcl spec of a AdapterConfig.
// This spec is used by HCL to read the fields of AdapterConfig.
// The decoded values from this spec will then be applied to a FlatAdapterConfig.
func (*FlatAdapterConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"adapter_name": &hcldec.AttrSpec{Name: "adapter_name", Type: cty.String, Required: false},
		"switch_name":  &hcldec.AttrSpec{Name: "switch_name", Type: cty.String, Required: false},
		"vlan_id":      &hcldec.AttrSpec{Name: "vlan_id", Type: cty.String, Required: false},
		"mac_address":  &hcldec.AttrSpec{Name: "mac_address", Type: cty.String, Required: false},
	}
	return s
}
